%{
  --------------------- 使用CZT完成一阶Keystone变换 -----------------------
  输入：Sp_tf   --- 脉压频域结果，Nums*Numf
  输出：Src_tf  --- 校正频域结果，Nums*Numf
  
  -------------------------------------------------------------------------
  通过FFT对公式中的线性卷积进行快速运算
  [1] 宽带雷达高速运动目标检测与成像处理研究，南京大学，2013
  
%}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function   Src_tf  = KT_CZT(Sp_tf)
% 全局变量
global   settings;

Numf            = settings.Numf;
Nums            = settings.Pm;

% 快时间频率
fr              = (0:Numf-1).*(settings.fs/Numf) - settings.fs/2;

% Step1: 选择最小的正整数L --- 输入的慢时间序列长度和CZT的长度相同
L               = 2^nextpow2(2*Nums - 1);

% Step2: 构造w
phi0            = ((settings.fc + fr)./settings.fc).*(2*pi/Nums);
w               = exp(-1i.*phi0);

% Step3&4: 构造G和H矩阵
% 构造G矩阵 
n1              = (0:Nums-1).';                  % 0 <= n <= M-1                      
nn1             = (n1.^2)./2;
W               = w.^(nn1);                      % W^(n^2/2)
% w ---> 1*Numf; nn1 ---> Nums*1; W ---> Nums*Numf

%--------------------------------------------------------------------------
nk              = (-Nums/2:Nums/2-1).';          % -M/2 <= nk <= M/2 - 1
nnk             = (nk.^2)./2;
Wnk             = w.^(nnk);

%--------------------------------------------------------------------------

g               = Sp_tf.*W;
Gk              = fft(g, L, 1);                  % L点FFT --- (3.25)
% (3.24)的后半部分通过FFT函数自动补零

% 构造H矩阵
nk              = (-Nums/2-Nums:Nums/2).';       % 因为只有频域的范围是-Nums/2
nk2             = (nk.^2)./2;                    % 到Nums/2时，结果才是正确的
h               = 1./(w.^(nk2));                 % 
% w ---> 1*Numf; nkk ---> L*1; h ---> L*Numf
Hk              = fft(h, L, 1);

% Step 5: V(k)=G(k)H(k) --- v(n)
Vk              = Gk.*Hk;
Vn              = ifft(Vk,[],1);                 % 这里Vn仍然是慢时间频域

% Step6: 取前Nums点作权值
Vn              = Vn(Nums+1:end,:).*Wnk;

% 通过对公式中nk的调整，这里计算的频域范围是[-PRF/2,PRF/2]
% 这样后面的速度模糊数的搜索才不会出现问题

% -------------- Src_tf ---------------------------------------------------
Src_tf          = ifft(Vn,[],1);

return



